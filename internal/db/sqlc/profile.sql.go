// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: profile.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id,
                      real_name,
                      quote,
                      address)
VALUES ($1, $2, $3, $4) RETURNING id, real_name, gender, quote, address, created_at, updated_at, user_id
`

type CreateProfileParams struct {
	UserID   int64          `json:"user_id"`
	RealName string         `json:"real_name"`
	Quote    sql.NullString `json:"quote"`
	Address  sql.NullString `json:"address"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.UserID,
		arg.RealName,
		arg.Quote,
		arg.Address,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.RealName,
		&i.Gender,
		&i.Quote,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const retrieveProfile = `-- name: RetrieveProfile :one
SELECT u.id, u.real_name, u.gender, u.quote, u.address, u.created_at, u.updated_at, u.user_id,
       p.real_name,
       p.gender,
       p.quote,
       p.address
FROM profiles AS u
         LEFT JOIN profiles AS p ON u.id = p.user_id
WHERE p.user_id = $1 LIMIT 1
`

type RetrieveProfileRow struct {
	ID         int64          `json:"id"`
	RealName   string         `json:"real_name"`
	Gender     sql.NullInt32  `json:"gender"`
	Quote      sql.NullString `json:"quote"`
	Address    sql.NullString `json:"address"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
	UserID     int64          `json:"user_id"`
	RealName_2 sql.NullString `json:"real_name_2"`
	Gender_2   sql.NullInt32  `json:"gender_2"`
	Quote_2    sql.NullString `json:"quote_2"`
	Address_2  sql.NullString `json:"address_2"`
}

func (q *Queries) RetrieveProfile(ctx context.Context, userID int64) (RetrieveProfileRow, error) {
	row := q.db.QueryRowContext(ctx, retrieveProfile, userID)
	var i RetrieveProfileRow
	err := row.Scan(
		&i.ID,
		&i.RealName,
		&i.Gender,
		&i.Quote,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.RealName_2,
		&i.Gender_2,
		&i.Quote_2,
		&i.Address_2,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET real_name = $2,
    quote     = $3,
    address   = $4
WHERE user_id = $1 RETURNING id, real_name, gender, quote, address, created_at, updated_at, user_id
`

type UpdateProfileParams struct {
	UserID   int64          `json:"user_id"`
	RealName string         `json:"real_name"`
	Quote    sql.NullString `json:"quote"`
	Address  sql.NullString `json:"address"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.UserID,
		arg.RealName,
		arg.Quote,
		arg.Address,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.RealName,
		&i.Gender,
		&i.Quote,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
